add - Addition
--------------

Write a program that
	reads several pairs of numbers and,
	for each pair, prints the sum.
The standard input and output devices
	are usually the keyboard and screen of a command line session.
Here is an example session with this program:

	$ ./add
	0 0
	0
	3 7
	10
	12 21
	33
	123 321
	444
	1234 4321
	5555

### Example input

	0 0
	3 7
	12 21
	123 321
	1234 4321


### Example output

	0
	10
	33
	444
	5555

### The `add` function

For a full score,
in addition to producing the correct output,
the program should be implemented using an `add` function
that receives two integers as arguments and returns an integer.
Please refer to the information for the chosen language:

* C prototype:        `int add(int x, int y);`
* Haskell type:       `add :: Int -> Int -> Int`
* Python definition:  `def add(x,y):`

If you're confused, try earning a partial score first.

### Scoring

TODO: make test files reflect the following scoring (they currently don't):

* 1/6: adds single pairs of numbers
* 2/6: adds single pairs of possibly negative numbers
* 3/6: adds multiple pairs of numbers
* 4/6: adds multiple pairs of possibly negative numbers
* 5/6: handles edge cases
* 6/6: implements the `add` function

### Hints

1. __Redirecting input:__
	On most systems (Windows / Linux / OS X),
	it is possible to redirect the standard input and output
	of your program to files, like so:

       $ ./add < inputfile.txt > outputfile.txt

	If you create a _plain_ text file with the "example input",
	the above command should produce
	a plain text file with the "example output".

2. __Produce output as you go:__
	You do not need to accumulate numbers and then produce everything at the end.
	It is enough to produce output as you go.
	As soon as you read a pair of numbers,
	produce the corresponding sum.

3. __Detecting the end of input__
	TODO: write me.

4. __Simulating the end of file__
	TODO: write me
