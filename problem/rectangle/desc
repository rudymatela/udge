rectangle - Rectangle
---------------------

	$ ./rectangle
	1 2 cm
	1x2 rectangle, area = 2, perimeter = 6
	3 6 in
	3x6 rectangle, area = 18, perimeter = 18
	10 1
	10x1 rectangle, area = 10, perimeter = 22

### Input and Output

Each line of input contains two numbers _w_ and _h_ where

-1 000 ≤ w, h ≤ 1 000

For each line of input there should be one line of output.

#### Example input

	1 2 cm
	3 6 in
	10 1 metres

#### Example output

	The area is 2 square cm and the perimeter is 6 cm.
	The area is 18 square in and the perimeter is 18 in.
	The area is 10 square metres and the perimeter is 22 metres.

### The `area` and `perimeter` functions

In order to get a full score,
your program should be implemented using functions `area` and `perimeter`.
They should receive a `rectangle` object.
Please refer to the information for your chosen language.

#### C

	struct rectangle {
		int height;
		int width;
	};
	int area(struct rectangle rectangle);
	int perimeter(struct rectangle rectangle);

#### Haskell

	data Rectangle = Rectangle { height :: Int
	                           , width :: Int
	                           }
	area :: Rectangle -> Int
	perimeter :: Rectangle -> Int

Alternatively, you can declare the rectangle type as:

	data Rectangle = Rectangle Int Int

#### Python

	class Rectangle:
		def __init__(self, width, height):
			self.width = width
			self.height = height

		def area(self):
			...

		def perimeter(self):
			...

#### C#

	class Rectangle
	{
		public int Width { get; set; }
		public int Height { get; set; }
		public Rectangle(int width, int height);
		public int Area();
		public int Perimeter();
	}

#### Java

	public class Rectangle
	{
		public int width;
		public int height;
		public Rectangle(int width, int height);
		public int area();
		public int perimeter();
	}


### Scoring

* 1/3: works for the above example
* 2/3: works for other test cases
* 3/3: implements the `area` and `perimeter` functions.
