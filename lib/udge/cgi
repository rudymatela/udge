#!/bin/bash
#
# lib/udge/cgi: utilities, supposed to be sourced in cgi scripts
#
# This file is part of Udge.
#
#
# Copyright (C) 2020-2023  Rudy Matela
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


set -e

. /etc/udgerc

http-header() {
	content-type-html
	$status
	echo
}

content-type-html() {
	echo 'Content-Type: text/html'
}

status-200-ok() {
	echo 'Status: 200 OK'
}

status-201-created() {
	echo 'Status: 201 Created'
}

status-202-accepted() {
	echo 'Status: 202 Accepted'
}

status-303-see-other() {
	echo 'Status: 303 See Other'
}

status-400-bad-request() {
	echo 'Status: 400 Bad Request'
}

status-401-unauthorized() {
	echo 'Status: 401 Unauthorized'
}

status-403-forbidden() {
	echo 'Status: 403 Forbidden'
}

status-405-method-not-allowed() {
	echo 'Status: 405 Method Not Allowed'
}

status-409-conflict() {
	echo 'Status: 409 Conflict'
}

status-422-unprocessable-entity() {
	echo 'Status: 422 Unprocessable Entity'
}

status-429-too-many-requests() {
	echo 'Status: 429 Too Many Requests'
}

status-500-internal-server-error() {
	echo 'Status: 500 Internal Server Error'
}

page-403-forbidden() {
	status=status-403-forbidden
	http-header
	html-header "403 Forbidden – $NAME"
	html-navbar
	echo "<h3>$NAME</h3>"
	echo '<h1>403 Forbidden</h1>'
	echo '<p>Access denied.</p>'
	html-navbar
	html-footer
}

page-405-method-not-allowed() {
	status=status-405-method-not-allowed
	http-header
	html-header "405 Method Not Allowed – $NAME"
	html-navbar
	echo "<h3>$NAME</h3>"
	echo '<h1>405 Method Not Allowed</h1>'
	echo '<p>Method not allowed.</p>'
	html-navbar
	html-footer
}


html-cat() {
	maybe-cat "$@" | html-escape
}


# usage: html-form-input <type> <id> <label> [placeholder] [value] [error]
# e.g.: html-form-input text user Username "user name"
# e.g.: html-form-input email email Email "email" "-invalid@ex.bla" "Invalid email address"
html-form-input() {
	type="$1"
	id="$2"
	label="$3"
	placeholder="$4"
	error="$5"
	value="$6"
	has_error=""
	[ -n "$error" ] && has_error=" has-error"
	[ -n "$error" ] && error="<span class=\"help-block\">$error</span>"
	[ -n "$value" ] && value=" value=\"$value\""
	cat <<HTML
<div class="form-group$has_error">
<label class="control-label" for="$id">$label</label>
<input type="$type" class="form-control" id="$id" name="$id" placeholder="$placeholder"$value>$error
</div>
HTML
}

html-form-select() {
	id="$1"
	label="$2"
	placeholder="$3"
	error="$4"
	value="$5"
	has_error=""
	[ -n "$error" ] && has_error=" has-error"
	[ -n "$error" ] && error="<span class=\"help-block\">$error</span>"
	echo "<div class=\"form-group$has_error\">"
	echo "<label class=\"control-label\" for=\"$id\">$label</label>"
	echo "<select class=\"form-control\" id=\"$id\" name=\"$id\">"
	(
	echo "<option disabled hidden value=\"\">$placeholder</option>"
	while read option name
	do
		[ -n "$name" ] || name=$option
		echo "<option value=\"$option\">$name</option>"
	done
	) | sed -e "s/\"$value\">/\"$value\" selected>/"
	echo "</select>$error"
	echo "</div>"
}

find-user-form() {
	echo "<h2>Find your user page</h2>"
	echo "<form action="/u" method="POST" enctype="multipart/form-data">"
	html-form-input text     user     "Username" 'username' "$user_error" "$user_value"
	html-form-input password password 'Password' 'password' "$password_error"
	echo '<input type="submit" name="submit" value="Find user page">'
	echo "</form>"
}

# are user and problem name sane?
# usage: sane-file filename
sane-file() {
	[ -s "$1" ] &&                  # is not empty
	[ `cat "$1" | wc -l` -le 1 ] && # has at most one line break
	LANG=C grep -q "$SANE" "$1"     # is sane
	# above, LANG=C is needed so [a-z] does not match characters like "ąęíóü"
}

# is this email sane?
# usage: sane-email-file filename
sane-email-file() {
	[ -s "$1" ] &&                     # is not empty
	[ "`cat "$1" | wc -l`" -le 1 ] &&  # has at most one line break
	LANG=C grep -qE "$SANE_EMAIL" "$1" # is sane
	# above, LANG=C is needed so [a-z] does not match characters like "ąęíóü"
}

# is this user valid according to the regex?
valid-user() {
	[ -z "$INVALID_USER_REGEX" ] || grep -vqE "$INVALID_USER_REGEX" "$1"
}

# usage: check-user username password_file
check-user() {
	username="$1"
	password_fn="$2"
	cat "$USERS/$username/salt" "$password_fn" |
	sha256sum |
	sed -e "s/ .*//" |
	diff -q - "$USERS/$username/password" >/dev/null 2>/dev/null
}
