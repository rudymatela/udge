#!/bin/bash
#
# check-1: check the output folder of a solution for a single set
#
# This file is part of Udge.
#
#
# Copyright (C) 2015-2023  Rudy Matela
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# usage:
#   check-1 path/to/problem/1 path/to/out/1 path/to/program.l [-v/--verbose]
prefix="$(dirname "$(dirname "$(dirname "$0")")")"
. "$prefix/lib/udge/core"

fail() {
	[ -n "$verbose" ] && [ -f "$run/exit" ] && echo -n "exit code: " && cat "$run/exit"
	[ -n "$verbose" ] && [ -f "$run/err" ] && echo "submitted exe's stderr:" >&2 && cat "$run/err" >&2
	echo "$@"
	exit 1
}

ferrxit() {
	echo "$@"
	errxit "$@"
}

sol="$1"
run="$2"
src="$3"
verbose="$4"

[ -n "$sol" ] || ferrxit "must provide input folder"
[ -n "$run" ] || ferrxit "must provide output folder"

[ -d "$sol" ] || ferrxit "input folder not found: '$sol'"
[ -d "$run" ] || warn    "output folder not found: '$run'"

[ -f "$src" ] || warn "could not find source '$src', will not run check-src"

check-exit-code() {
	[ "$1" = 0 ]
}

exit-code-meaning() {
	# I found no comprehensive table with the default exit codes in Linux/Unix
	# for various signals and behaviours.  This is a compilation from various
	# assorted web sources and my own tests.
	case "$1" in
	0) echo "error" ;; # should never be reached
	127) echo "runtime error: command not found"        ;;
	132) echo "runtime error: illegal instruction"      ;; # SIGILL
	133) echo "runtime error: division by zero"         ;;
	134) echo "runtime error: aborted"                  ;; # SIGABRT
	136) echo "runtime error: floating point exception" ;; # SIGFPE
	137) echo "memory limit exceeded"                   ;;
	139) echo "runtime error: segmentation fault"       ;; # SIGSEGV
	152) echo "time limit exceeded"                     ;; # SIGXCPU
	153) echo "output limit exceeded"                   ;; # SIGXFSZ
	158) echo "time limit exceeded"                     ;; # SIGXCPU
	159) echo "output limit exceeded"                   ;; # SIGXFSZ
	OLE) echo "output limit exceeded"                   ;; # SIGXFSZ
	*)   echo "runtime error"                           ;;
	esac
}

check-out() {
	if [ -n "$verbose" ]
	then
		diff -rud "$1" "$2"
	else
		diff -q "$1" "$2" >/dev/null
	fi
}

compile-error() {
	[ -n "$verbose" ] && echo "$run/exe* does not exist or is not unique:" $run/exe* >&2
	cat $run/log >&2
	msg="`tail -1 $run/log | grep '^aborted: ' | sed -e 's/^aborted: //'`"
	[ -n "$msg" ] && fail "compile error: $msg"
	fail "compile error"
}

# This may happen when:
# 1. there's no space left on device, i.e.: output limit exceeded
# 2. a file to which udge has no read permissions was created
[ -d "$run" ] || fail "unknown error"

# checks that it is compiled
[ -e $run/exe* ] || compile-error

# sandboxing checks
grep -qE "^(OLE|153|159)$"                   $run/exit && fail "output limit exceeded"
grep -q "udge-sandbox: fork: .* unavailable" $run/err  && fail "reached maximum number of processes"
grep -q "^timeout: sending signal TERM"      $run/err  && fail "time limit exceeded"
grep -q "Cannot allocate memory"             $run/err  && fail "memory limit exceeded" # not a catch-all

# checks the exit code
exitcode="$(cat $run/exit)"
checkexitcode=check-exit-code message="$(exit-code-meaning $exitcode)"
[ -x $sol/check-exit-code ] && checkexitcode=$sol/check-exit-code message="incorrect exit code"
$checkexitcode "$exitcode" || fail "$message"

# checks standard output and standard error
check=check-out
[ -x $sol/check-out ] && check=$sol/check-out
$check $sol/out $run/out $verbose || fail "incorrect output"
if [ -e $sol/err ]
then
	$check $sol/err $run/err $verbose || fail "incorrect error output"
fi
if [ -e $sol/af ]
then
	$check $sol/af $run/files $verbose || fail "incorrect output files"
fi

# optionally check the source when check-src is present:
#   formatting, author name, etc
if [ -f "$src" ] && [ -x $sol/check-src ]
then
	reason="`grep reason: $sol/check-src | sed 's/.*reason: //' | head -1`"
	[ -n "$reason" ] || reason="failed source check, please contact admin"
	$sol/check-src $src $verbose || fail "$reason"
fi
