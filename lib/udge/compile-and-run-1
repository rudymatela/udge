#!/bin/bash
#
# compile-and-run-1: compiles and runs program for a single test set
#
# This file is part of Udge.
#
#
# Copyright (C) 2015-2021  Rudy Matela
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# usage:
#   lib/udge/compile-and-run-1 path/to/problem/1 path/to/problem.lang path/to/dest [-v]
#
# this script returns an error when:
#
# 1. there is a compilation error
# 2. the running time limit is reached
# 3. too many processes are created
#
# This allows us to short-circuit testing.
# It is stopped when any of the above happens.
prefix="$(dirname "$(dirname "$(dirname "$0")")")"
. "$prefix/lib/udge/core"
set="$1"
src="$2"
dst="$3"
verbose="$4"

[ -n "$set" ] || errxit "must provide input folder"
[ -n "$src" ] || errxit "must provide source"
[ -n "$dst" ] || errxit "must provide destination folder"

[ -d "$set" ] || errxit "input folder not found"
[ -f "$src" ] || errxit "source file not found"
mkdir "$dst"  || errxit "could not create destination directory"

rmerrxit() {
	msg="$1"
	shift
	rm -f "$@"
	errxit $msg
}

java="java -jar -Xms128m -Xmx256m -XX:CompressedClassSpaceSize=64m -XX:MaxMetaspaceSize=512m" # -XX:+UseConcMarkSweepGC
case "$src" in
	*.c)    lang=c                           ;;
	*.cc)   lang=cc                          ;;
	*.cpp)  lang=cc                          ;;
	*.hs)   lang=hs                          ;;
	*.lhs)  lang=hs                          ;;
	*.lua)  lang=lua  ;run=lua               ;;
	*.py)   lang=py                          ;;
	*.cs)   lang=cs   ;run=mono    ;ext=.exe ;;
	*.java) lang=java ;run="$java" ;ext=.jar ;;
	*.js)   lang=js   ;run=node    ;ext=.js  ;;
	*.rb)   lang=rb                          ;;
	*) errxit "unknown/unsupported file format or language" ;;
esac

[ -n "$verbose" ] && echo Compiling solution $src for $set in $lang.

cp $src .
src=`basename $src`

main="$set/main.$lang"
[ -f "$main" ] && cp $main .
main=`basename $main`
aslib=
[ -f "$main" ] && aslib=-as-lib
exe=exe$aslib$ext
[ -e $exe ] ||
"$lib/compile$aslib/$lang" "$src" $exe "$main" >$dst/log 2>&1 ||
verrxit "Failed to compile $src"
cp $exe $dst
touch $dst/log

[ -n "$verbose" ] && cat $dst/log

[ -n "$verbose" ] && echo Running solution $src for $set in $lang.

in=$set/in
[ -f "$in" ] || in=/dev/null
args=`maybe-cat $set/args`

[ -n "$DEFAULT_TIME_LIMIT" ] || DEFAULT_TIME_LIMIT=1
time_limit=`cator $DEFAULT_TIME_LIMIT $set/time-limit`

sandbox=`realpath $bin/udge-sandbox`

mkdir $dst/files
[ "$(echo $set/*.txt)" != "$set/*.txt" ] && cp $set/*.txt $dst/files
[ "$(echo $set/bf/*)"  != "$set/bf/*"  ] && cp $set/bf/*  $dst/files
cd $dst/files

# the order here does matter:
# timeout should be after the $sandbox command
# otherwise process termination may not work as nicely (cf. any 0-tle.c)
nice \
	$sandbox \
	timeout --preserve-status -v -k1s ${time_limit}s \
	/usr/bin/time -f"%e %M" -o ../time \
	$run ../$exe $args <"$in" >../out 2>../err
echo $? > ../exit

# kill ../$exe if it is still running
killall -gq -9 ../$exe && errxit "the executable had to be killed (signal 9)"

cd - >/dev/null

touch "$dst"

grep -q "udge-sandbox: fork: .* unavailable" $dst/err && errxit "too many processes"
grep -q "^timeout: sending signal TERM"      $dst/err && exit 1
true
