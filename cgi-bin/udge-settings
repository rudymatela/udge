#!/bin/bash
#
# cgi-bin/udge-settings: user settings
#
#
# Copyright (C) 2020-2022  Rudy Matela
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Recommended config using fcgiwrap:
#
# location = /settings {
#   fastcgi_pass unix:/run/fcgiwrap.sock;
#   fastcgi_param SCRIPT_FILENAME /usr/local/bin/udge-settings;
#   include fastcgi.conf;
# }
#
# Use the above inside an existing server{} entry.

set -e

prefix="$(dirname "$(dirname "$0")")"
. "$prefix/lib/udge/core"
. "$lib/html"
. "$lib/cgi"

get() {
	http-header
	html-header "Settings – $NAME"
	html-navbar
	echo "<h2>User settings</h2>"
	echo "<form action="/settings" method="POST" enctype="multipart/form-data">"
	html-form-input text     user     "Username" 'username' "$user_error" "$user_value"
	html-form-input password password 'Password' 'password' "$password_error"
	echo "<input type=\"hidden\" id=\"load\" name=\"load\">"
	echo '<input type="submit" name="submit" value="Update settings">'
	echo "</form>"
	html-navbar
	html-footer
}

has-error() {
	[ -n "$user_error"     ] ||
	[ -n "$password_error" ] ||
	[ -n "$email_error"    ]
	false
}


success-load() {
	http-header
	html-header "$user_value – settings – $NAME"
	html-navbar
	echo "<h2>$user_value – settings</h2>"
	echo "<form action="/settings" method="POST" enctype="multipart/form-data">"
	echo "<input type=\"hidden\" id=\"user\" name=\"user\" value=\"$user_value\">"
	echo "<input type=\"hidden\" id=\"update\" name=\"update\">"
	echo "<pre>`find $tmpdata`</pre>"
	echo "<pre>`grep "" -R $tmpdata`</pre>"
	html-form-input text     name                  'Name (optional)'       'name'                  "$name_error"     "$name_value"
	html-form-input email    email                 'Email'                 'email'                 "$email_error"    "$email_value"
	html-form-input email    email-confirmation    'Email confirmation'    'email confirmation'    "$email_error"    "$email_confirmation_value"
	html-form-input password password              'Password'              'password'              "$password_error" "$password_value"
	echo '<input type="submit" name="submit" value="Update settings">'
	echo "</form>"
	html-navbar
	html-footer
}


success-update() {
	http-header
	html-header "User settings updated"
	html-navbar
	cat <<HTML
<h2>User settings updated</h2>

<p>
Successfully updated
user <strong>$user_value</strong>
with email <strong>$email_value</strong>
and name <strong>$name_value</strong>.
</p>

<p>
Your <a href="/u/`user-or-anon $user_value`">user page</a> will be updated in a few minutes.
</p>
HTML
	html-navbar
	html-footer
}


check-email() {
	[ -s "$email_fn" ] || {
		echo "email is missing"
		return
	}
	sane-email-file "$email_fn" || {
		echo "invalid or unsupported email address"
		return
	}
	diff -q $email_fn $email_confirmation_fn >/dev/null 2>/dev/null || {
		echo "emails do not match"
		return
	}
}


post() {
	tmpdata=`mktemp -d "/tmp/udge-tmpdata.XXXXXXXXXX"`
	$bin/cgi-create-data-files $tmpdata || errxit "problem while creating cgi-data-files"

	user_fn="$tmpdata/user/value"
	password_fn="$tmpdata/password/value"
	user_value="`html-cat "$user_fn"`"

	[ -e "$tmpdata/load" ] || {
		name_fn="$tmpdata/name/value"
		email_fn="$tmpdata/email/value"
		email_confirmation_fn="$tmpdata/email-confirmation/value"
		name_value="`html-cat "$name_fn"`"
		email_value="`html-cat "$email_fn"`"
		email_confirmation_value="`html-cat "$email_confirmation_fn"`"
	}

	[ -s "$user_fn" ] && {
		sane-file "$user_fn" || user_error="invalid characters: use lowercase English letters, digits, dashes (-) or underscores (_)"
	} || user_error="user is missing"

	[ -s "$password_fn" ] || password_error="password is missing"

	[ -e "$tmpdata/load" ] || {
		email_error="`check-email`"
	}
	has-error && {
		rm -r $tmpdata
		status=status-422-unprocessable-entity get
		return
	}

	check-user "$user_value" "$password_fn" ||
	user_error="invalid credentials"
	[ -z "$user_error" ] ||
	password_error="invalid credentials <small>(<a href="/forgot-password">forgot password</a>?)</small>"
	has-error && {
		rm -r $tmpdata
		status=status-401-unauthorized get
		return
	}

	if [ -e "$tmpdata/load" ]
	then
		name_value="`cat /var/lib/udge/users/$user_value/name`"
		email_value="`cat /var/lib/udge/users/$user_value/email`"
		email_confirmation_value="`cat /var/lib/udge/users/$user_value/email`"
		success-load
	else
		success-update
	fi

	rm -r $tmpdata
}


case $REQUEST_METHOD in
	GET)  get  ;;
	POST) post ;;
	*)    page-405-method-not-allowed ;;
esac
