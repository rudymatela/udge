#!/bin/bash
#
# cgi-bin/new-user: user creation page
#
#
# Copyright (C) 2020  Rudy Matela
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Recommended config using fcgiwrap:
#
# location = /new-user {
#   fastcgi_pass unix:/run/fcgiwrap.sock;
#   fastcgi_param SCRIPT_FILENAME /usr/local/bin/new-user;
#   include fastcgi.conf;
# }
#
# Use the above inside an existing server{} entry.
#
# TODO: somehow define which user this will run in
#       and add instructions how to set up


set -e

prefix="$(dirname "$(dirname "$0")")"
. "$prefix/lib/udge/core"
. "$lib/html"
. "$lib/cgi"

get() {
http-header
html-header "Create a new user on Udge"
cat <<HTML
<h3>New user</h3>
<form action="/new-user" method="POST" enctype="multipart/form-data">
  <div class="form-group">
    <label class="control-label" for="user">Username</label>
    <input type="text" class="form-control" id="user" name="user" placeholder="user">
  </div>
  <div class="form-group">
    <label class="control-label" for="email">Email</label>
    <input type="email" class="form-control" id="email" name="email" placeholder="email">
  </div>
  <div class="form-group">
    <label class="control-label" for="email-confirmation">Email confirmation</label>
    <input type="email" class="form-control" id="email-confirmation" name="email-confirmation" placeholder="email confirmation">
  </div>
  <div class="form-group">
    <label class="control-label" for="password">Password</label>
    <input type="password" class="form-control" id="password" name="password" placeholder="password">
  </div>
  <div class="form-group">
    <label class="control-label" for="password-confirmation">Password confirmation</label>
    <input type="password" class="form-control" id="password-confirmation" name="password-confirmation" placeholder="password confirmation">
  </div>
  <input type="submit" name="submit" value="Create new user">
</form>
HTML
html-footer
}


success() {
	http-header
	html-header
	cat <<HTML
<h3>User created</h3>

<p>
Successfully created
user <strong>$user_value</strong>
with email <strong>$email_value</strong>.
</p>

<p>
Your <a href="/u/$user_value">user page</a> will be available in a few minutes.
</p>

<p>
You are ready to <a href="/submit">submit a solution</a> now
for any problem in the <a href="/">problem index</a>.
</p>
HTML
	html-footer
}


failure() {
	http-header
	html-header
	cat <<HTML
<h3>Error: could not create user</h3>

<ul>
HTML
	cat $errors | sed -e 's,^,<li>,;s,$,</li>,'
	cat << HTML
</ul>

<p>
Please hit your browser's <a href="javascript:history.go(-1)">back</a> button
and try again.
</p>
HTML
	html-footer
}


post() {
	tmpdata=`mktemp -d "/tmp/udge-tmpdata.XXXXXXXXXX"`
	../bin/cgi-create-data-files $tmpdata

	user_fn="$tmpdata/user/value"
	password_fn="$tmpdata/password/value"
	password_confirmation_fn="$tmpdata/password-confirmation/value"
	email_fn="$tmpdata/email/value"
	email_confirmation_fn="$tmpdata/email-confirmation/value"
	user_value=`mcat "$user_fn"`
	email_value=`mcat "$email_fn"`
	email_confirmation_value=`mcat "$email_confirmation_fn"`

	errors="$tmpdata/form-errors"
	cat /dev/null > $errors
	sane "$user_fn"       || echo "invalid characters: use lowercase English letters, digits, dashes (-) or underscores (_)" >> $errors
	[ -s "$user_fn" ]     || echo "username is missing" >> $errors
	[ -s "$password_fn" ] || echo "password is missing" >> $errors
	[ -s "$email_fn" ]    || echo "email is missing" >> $errors
	diff -q $password_fn $password_confirmation_fn > /dev/null || echo "passwords do not match" >> $errors
	diff -q $email_fn    $email_confirmation_fn    > /dev/null || echo "emails do not match" >> $errors
	if [ -s $errors ]
	then
		status=status-422-unprocessable-entity
		failure
		rm -r $tmpdata
		exit
	fi

	user_dir="$USERS/$user_value"
	[ -e "$user_dir" ] && echo "username already exists (pick another)" >> $errors
	if [ -s $errors ]
	then
		status=status-409-conflict
		failure
		rm -r $tmpdata
		exit
	fi

	mkdir -p "$user_dir"
	cat $SALT_FILE $password_fn | sha256sum | sed -e "s/ .*//" > "$user_dir/password"
	cp "$email_fn" "$user_dir/email"


	rm -r $tmpdata
	status=status-201-created
	success
}


case $REQUEST_METHOD in
	GET)  get  ;;
	POST) post ;;
	*)    errxit "Unsupported request method '$REQUEST_METHOD'" ;; # TODO: format an error 500 page
esac
