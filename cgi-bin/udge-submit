#!/bin/bash
#
# cgi-bin/submit: solution submission page
#
#
# Copyright (C) 2020  Rudy Matela
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Recommended config using fcgiwrap:
#
# location = /submit {
#   fastcgi_pass unix:/run/fcgiwrap.sock;
#   fastcgi_param SCRIPT_FILENAME /usr/local/bin/submit;
#   include fastcgi.conf;
# }
#
# Use the above inside an existing server{} entry.

# TODO: somehow run this under a specific unpriviledged user
# TODO: block to 1 submission per minute window (glob)
# TODO: block to 5 submissions per user total in the queue

# TODO: remove responsive form?
#       (just print out the error message at the top and clear all the fields)


set -e

prefix="$(dirname "$(dirname "$0")")"
. "$prefix/lib/udge/core"
. "$lib/html"
. "$lib/cgi"

get() {
	http-header
	html-header "Submit your solution to Udge"
	html-navbar submit
	echo "<h2>Submit your solution</h2>"
	echo "<form action="/submit" method="POST" enctype="multipart/form-data">"
	html-form-input text     user     'Username (<a href="/new-user">new user</a>)' 'username' "$user_error" "$user_value"
	html-form-input password password 'Password' 'password' "$password_error"
	html-form-input file     program  'Program'  'program'  "$program_error"  "$program_value"
	ls-problems  | html-form-select problem  'Problem id' 'select problem...'  "$problem_error"  "$problem_value"
	ls-languages | html-form-select language 'Language'   'select language...' "$language_error" "$language_value"
	echo "<input type="submit" name="submit" value="Submit">"
	echo "</form>"
	html-navbar submit
	html-footer
}

has-error() {
	[ -n "$user_error"     ] ||
	[ -n "$password_error" ] ||
	[ -n "$program_error"  ] ||
	[ -n "$problem_error"  ] ||
	[ -n "$language_error" ] ||
	false
}


success() {
	http-header
	html-header
	html-navbar
	cat <<HTML
<h3>Submission successful</h3>

<p>
Successfully registered a submission <br>
for <strong>$problem_value</strong></strong> <br>
in <strong>$language_value</strong> <br>
by <strong>$user_value</strong> <br>
at $timestamp
(UTC).
</p>

<p>
Please check your <a href="/u/$user_value">user page</a>
for the results
after a few minutes.
</p>
HTML
	html-navbar
	html-footer
}


post() {
	tmpdata=`mktemp -d "/tmp/udge-tmpdata.XXXXXXXXXX"`
	$bin/cgi-create-data-files $tmpdata || errxit "problem while creating cgi-data-files"

	user_fn="$tmpdata/user/value"
	password_fn="$tmpdata/password/value"
	program_fn="$tmpdata/program/value"
	problem_fn="$tmpdata/problem/value"
	language_fn="$tmpdata/language/value"
	user_value="`mcat "$user_fn"`"
	problem_value="`mcat "$problem_fn"`"
	language_value="`mcat "$language_fn"`"

	sane-file "$user_fn"  || user_error="invalid characters: use lowercase English letters, digits, dashes (-) or underscores (_)"
	[ -s "$user_fn" ]     || user_error="user is missing"

	[ -s "$password_fn" ] || password_error="password is missing"

	[ -s "$program_fn" ]  || program_error="program is missing"

	sane-file "$problem_fn"           || problem_error="select the problem"
	[ -s "$problem_fn" ]              || problem_error="select the problem"
	[ -d "$PROBLEMS/$problem_value" ] || problem_error="invalid problem id"

	sane-file "$language_fn"          || language_error="select the language"
	[ -s "$language_fn" ]             || language_error="select the language"

	if has-error
	then
		status=status-422-unprocessable-entity
		get
		rm -r $tmpdata
		exit
	fi

	check-user "$user_value" "$password_fn" || user_error="invalid credentials"
	password_error="$user_error"
	if has-error
	then
		status=status-401-unauthorized
		get
		rm -r $tmpdata
		exit
	fi

	timestamp=`date -u "+%Y%m%d-%H%M%S"`
	umask 0002 # allows for members of the http group to write (or remove)
	destdir="$SUBMISSIONS/$user_value/$timestamp"
	destfile="$destdir/$problem_value.$language_value"
	mkdir -p $destdir
	cp "$tmpdata/program/value" "$destdir/$problem_value.$language_value"

	status-202-accepted
	success

	rm -r $tmpdata
}


case $REQUEST_METHOD in
	GET)  get  ;;
	POST) post ;;
	*)    errxit "Unsupported request method '$REQUEST_METHOD'" ;; # TODO: format an error 500 page
esac
