#!/bin/bash
#
# cgi-bin/udge-submit: solution submission page
#
#
# Copyright (C) 2020-2021  Rudy Matela
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Recommended config using fcgiwrap:
#
# location = /submit {
#   fastcgi_pass unix:/run/fcgiwrap.sock;
#   fastcgi_param SCRIPT_FILENAME /usr/local/bin/udge-submit;
#   include fastcgi.conf;
# }
#
# Use the above inside an existing server{} entry.

set -e

prefix="$(dirname "$(dirname "$0")")"
. "$prefix/lib/udge/core"
. "$lib/html"
. "$lib/cgi"

new-user-link() {
	$NEW_USER && echo ' (<a href="/new-user">new user</a>)'
}

get() {
	http-header
	html-header "Submit your solution â€“ $NAME"
	html-navbar submit
	echo "<h2>Submit your solution</h2>"
	echo "<form action="/submit" method="POST" enctype="multipart/form-data">"
	html-form-input text     user     "Username`new-user-link`" 'username' "$user_error" "$user_value"
	html-form-input password password 'Password' 'password' "$password_error"
	html-form-input file     program  'Program'  'program'  "$program_error"  "$program_value"
	ls-problems  | html-form-select problem  'Problem id' 'select problem...'  "$problem_error"  "$problem_value"
	ls-languages | html-form-select language 'Language'   'select language...' "$language_error" "$language_value"
	echo "<input type="submit" name="submit" value="Submit">"
	echo "</form>"
	html-navbar submit
	html-footer
}

has-error() {
	[ -n "$user_error"     ] ||
	[ -n "$password_error" ] ||
	[ -n "$program_error"  ] ||
	[ -n "$problem_error"  ] ||
	[ -n "$language_error" ] ||
	false
}


success() {
	http-header
	html-header "Submission successful"
	html-navbar
	cat <<HTML
<h3>Submission successful</h3>

<p>
Successfully registered a submission <br>
for <strong>$problem_value</strong></strong> <br>
in <strong>$language_value</strong> <br>
by <strong>$user_value</strong> <br>
at $timestamp
(UTC).
</p>

<p>
Please check your <a href="/u/$user_value">user page</a>
for the results
after a few minutes.
</p>
HTML
	html-navbar
	html-footer
}


post() {
	now=`date "+%Y-%m-%d %H:%M:%S"`

	tmpdata=`mktemp -d "/tmp/udge-tmpdata.XXXXXXXXXX"`
	$bin/cgi-create-data-files $tmpdata || errxit "problem while creating cgi-data-files"

	user_fn="$tmpdata/user/value"
	password_fn="$tmpdata/password/value"
	program_fn="$tmpdata/program/value"
	problem_fn="$tmpdata/problem/value"
	language_fn="$tmpdata/language/value"
	user_value="`html-cat "$user_fn"`"
	problem_value="`html-cat "$problem_fn"`"
	language_value="`html-cat "$language_fn"`"

	filename="`maybe-cat $tmpdata/program/filename`"
	filename="`basename "$filename"`"
	extension="${filename##*.}"
	filename="${filename%.*}"

	sane-file "$user_fn"  || user_error="invalid characters: use lowercase English letters, digits, dashes (-) or underscores (_)"
	[ -s "$user_fn" ]     || user_error="user is missing"

	[ -s "$password_fn" ] || password_error="password is missing"

	[ -s "$program_fn" ] &&
	[ "`wc -c <$program_fn`" -le 8192 ] || program_error="source file is too big"
	[ -s "$program_fn" ]                || program_error="program is missing"

	if [ -s "$problem_fn" ]
	then
		sane-file "$problem_fn"           || problem_error="problem id invalid" problem_value=""
		[ -d "$PROBLEMS/$problem_value" ] || problem_error="invalid problem id" problem_value=""
	else
		sane "$filename" &&
		[ -n "$filename" ] &&
		[ -d "$PROBLEMS/$filename" ] &&
		problem_value="$filename" ||
		problem_error="select the problem"
	fi

	if [ -s "$language_fn" ]
	then
		sane-file "$language_fn"              || language_error="invalid language"                language_value=""
		[ -x "$lib/compile/$language_value" ] || language_error="invalid or unsupported language" language_value=""
	else
		sane "$extension" &&
		[ -n "$extension" ] &&
		[ -x "$lib/compile/$extension" ] &&
		language_value="$extension" ||
		language_error="select the language"
	fi

	if has-error
	then
		status=status-422-unprocessable-entity
		get
		rm -r $tmpdata
		exit
	fi

	check-user "$user_value" "$password_fn" || user_error="invalid credentials"
	password_error="$user_error"
	if has-error
	then
		status=status-401-unauthorized
		get
		rm -r $tmpdata
		exit
	fi

	timestamp=`date -u +%Y%m%d-%H%M%S`
	submissions="$SUBMISSIONS/$user_value"
	destdir="$submissions/$timestamp"
	# If a submission leaves the submission folder and we get another in the
	# same second it is possible to bypass the following.
	# udge-check handles this by ignoring the latest submission
	[ -d $destdir ]         && program_error="no more than 1 submission per second, try again in a few seconds"
	n_enqueued=`ls -1 $submissions 2>/dev/null | wc -l`
	[ "$n_enqueued" -lt 3 ] || program_error="no more than 3 submissions on the queue per user, try again in a few minutes"
	if has-error
	then
		status=status-429-too-many-requests
		get
		rm -r $tmpdata
		exit
	fi

	$bin/udge-create-submission "$user_value" "$tmpdata/program/value" "$timestamp" "$problem_value" "$language_value" >&2 ||
		errxit "internal server error, could not create submission"

	status-202-accepted
	success

	rm -r $tmpdata
}


case $REQUEST_METHOD in
	GET)  get  ;;
	POST) post ;;
	*)    page-405-method-not-allowed ;;
esac
