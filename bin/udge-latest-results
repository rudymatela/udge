#!/bin/bash
#
# udge-latest-results: prints the latest results for a given user
#
# Usage: udge-latest-results <user>
#
#
# Copyright (C) 2020  Rudy Matela
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

prefix="$(dirname "$(dirname "$0")")"
. "$prefix/lib/udge/core"
errxit() {
	echo "$0, error: $@" >&2
	echo "usage:"        >&2
	echo "  $0 <user> [0|amount] [problem]"   >&2
	exit 1
}
user="$1"
amount="$2"
problem="$3"
[ -n "$user" ] || errxit "missing <user> argument"
[ -d "$USERS/$user" ] || errxit "user not found"
submissions="$SUBMISSIONS/$user"
results="$RESULTS/$user"
[ -n "$amount" ] || amount=5
head="cat"
[ "$amount" != 0 ] && head="head -$amount"
[ -n "$problem" ] || problem='*'
format() {
	sed -e 's,.*/\([0-9][0-9][0-9][0-9]\)\([0-9][0-9]\)\([0-9][0-9]\)-\([0-9][0-9]\)\([0-9][0-9]\)\([0-9][0-9]\)/\([^/]*\),\1-\2-\3 \4:\5:\6  \7,'
}
stamp() {
	sed -e 's,.*/\([0-9][0-9][0-9][0-9]\)\([0-9][0-9]\)\([0-9][0-9]\)-\([0-9][0-9]\)\([0-9][0-9]\)\([0-9][0-9]\)/\([^/]*\),\1-\2-\3 \4:\5:\6  \7  &,'
}
list-submissions() {
	[ -d "$submissions" ] && find $submissions -name "$problem.*" | sort -r
}
list-slots() {
	[ -d "$SLOTS" ]       && find $SLOTS       -name "$problem.*" | grep "/$user/" | sort -r
}
list-results() {
	# stamp|sort is needed so we list chronologically and not by problem
	[ -d "$results" ]     && find $results     -name "$problem.*" | stamp | sort -r | sed -e "s/^.*  //"
}
entry() {
	filename="$1"
	entry="`echo $filename | format`"
	result="$2"
	time="$3"
	memory="$4"
	reason="$5"
	printf "%s#%s#%s#%s#%s\n"  "$entry"  "$result"  "$time"  "$memory"  "$reason"
}
entries() {
	for filename in `list-submissions`; do entry "$filename" - - - "queued";  done
	for filename in `list-slots`;       do entry "$filename" - - - "judging"; done
	for filename in `list-results | $head`
	do
		dn="`dirname $filename`"
		result="`tail -1 $dn/result`"

		time="`cut -d' ' -f1 $dn/time`"
		[ -n "$time" ] || time=-
		[ "$time" = "-" ] || time=${time}ms

		memory="`cut -d' ' -f2 $dn/time`"
		[ -n "$memory" ] || memory=-
		[ "$memory" = "-" ] || memory=${memory}MB

		reason=""
		[ "`echo $result | bc`" == 1 ] || reason="`tail -2 $dn/result | head -1`"
		entry  "$filename"  "$result"  "$time"  "$memory"  "$reason" | sed -e "s/ *$//"
	done
}
entries | column -t -s'#' -R 2,3,4 | sed -e "s/ *$//"
