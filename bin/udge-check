#!/bin/bash
#
# udge-check: checks previous runs
#
# Usage: udge-check
#
#
# Copyright (C) 2020  Rudy Matela
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

prefix="$(dirname "$(dirname "$0")")"
. "$prefix/lib/udge/core"

set -e

[ -d "$SLOTS" ] || errxit "the slots dir does not exist ($SLOTS)"
[ -d "$RUN" ]   || errxit "the run dir does not exist ($RUN)"

slot=
for s in `ls-slots`
do
	[ -d $SLOTS/$s ] || errxit "slot $s folder $SLOTS/$s does not exist"
	[ -d $RUN/$s   ] || errxit "run $s folder $RUN/$s does not exist"
	if [ -e $RUN/$s/lock/run ] && mkdir $RUN/$s/check  # relies on mk atomicity
	then
		slot=$s
		break
	fi
done
[ -n "$slot" ] || finish "nothing to do"

# If using an user for each slot, warn if there is still a process running.
# This may be a false alarm caused by a new compile-and-run process checking
# for a submission.
slotuser="`stat -c%U $SLOTS/$s/lock`"
[ "$slotuser" != "`whoami`" ] &&
	pgrep -u $slotuser >/dev/null &&
	warn "There are `pgrep -cu $slotuser` processes running for $slotuser."

cp -r $RUN/$s/{lock/run,check}  # copy everything to check just in case

cleanup() {
	rm -r $SLOTS/$s/lock
	# if a junk file already exists, move it somewhere else 1st
	[ -e $RUN/$s/junk ] &&
		warn "moving junk file first (possible tampering attempt)" &&
		mv $RUN/$s/junk `mktemp -u $RUN/$s/junk.XXXXXXXXXXXXXXXXXXXX`
	# We can't simply delete $RUN/$s/lock
	# as udge-check runs as a different user from udge-compile-and-run.
	# So we just move it to a junk folder and let compile-and-run delete it in the next run.
	mv $RUN/$s/lock $RUN/$s/junk || warn "could not move $RUN/$s/lock"
	rm -r $RUN/$s/check || warn "could not remove $RUN/$s/check"
}

clerrxit() {
	cleanup
	errxit "$@"
}

submission="`find $SLOTS/$slot -type f`"
[ -n "$submission" ] || clerrxit "no submission"
[ -f "$submission" ] || clerrxit "submission file not found: $submission"

echo checking $submission

user="`     echo $submission | sed -e 's,.*/\(.*\)/\(.*\)/\(.*\)\.\(.*\),\1,'`"
timestamp="`echo $submission | sed -e 's,.*/\(.*\)/\(.*\)/\(.*\)\.\(.*\),\2,'`"
problem="`  echo $submission | sed -e 's,.*/\(.*\)/\(.*\)/\(.*\)\.\(.*\),\3,'`"
language="` echo $submission | sed -e 's,.*/\(.*\)/\(.*\)/\(.*\)\.\(.*\),\4,'`"

[ -n "$user" ]      || clerrxit "could not parse user"
[ -n "$timestamp" ] || clerrxit "could not parse timestamp"
[ -n "$problem" ]   || clerrxit "could not parse problem"
[ -n "$language" ]  || clerrxit "could not parse language"

$lib/check $PROBLEMS/$problem $RUN/$s/check/run | tee $SLOTS/$s/lock/$user/$timestamp/result
$lib/timeavg $RUN/$s/check/run                  | tee $SLOTS/$s/lock/$user/$timestamp/time
mkdir -p $RESULTS/$user/$problem
mv $SLOTS/$s/lock/$user/$timestamp $RESULTS/$user/$problem ||
	warn "submission already judged?"
cleanup
echo created $RESULTS/$user/$problem/$timestamp/$problem.$language
echo created $RESULTS/$user/$problem/$timestamp/result

bestmp="`mktemp /tmp/udge-best-XXXXXXXXXX`"
chmod 644 $bestmp
for file in $RESULTS/$user/$problem/*/result
do
	tail -1 "$file"
done | sort -n | tail -1 >$bestmp
mv $bestmp $RESULTS/$user/$problem/best
echo updated $RESULTS/$user/$problem/best

bestmp="`mktemp /tmp/udge-best-XXXXXXXXXX`"
chmod 644 $bestmp
for file in `find $RESULTS/$user/$problem -mindepth 2 -maxdepth 2 -type f -name "*.$language"`
do
	tail -1 "`dirname $file`/result"
done | sort -n | tail -1 >$bestmp
mv $bestmp $RESULTS/$user/$problem/best.$language
echo updated $RESULTS/$user/$problem/best.$language

touch $RESULTS/$user

echo
echo running again...
exec $bin/udge-check
