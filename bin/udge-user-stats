#!/bin/bash
#
# udge-user-stats: prints a given user stats
#
# Usage: ./bin/udge-user-stats <user>
#
#
# Copyright (C) 2020  Rudy Matela
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

prefix="$(dirname "$(dirname "$0")")"
. "$prefix/lib/udge/core"
. "$lib/html"

errxit() {
	echo "`basename $0`, error: $@" >&2
	echo "usage:"        >&2
	echo "  `basename $0` <user> [all/overall/problem/short] [scoring-type]" >&2
	exit 1
}

user="$1"
action="$2"
score="$3"

[ -n "$user" ] || errxit "missing <user> argument"
[ -d "$USERS/$user" ] || errxit "user not found"
results="$RESULTS/$user"

[ -n "$score" ] || score=$SCORE
score="$lib/score/$score"
[ -x "$score" ] || errxit "invalid SCORE type ($score not found)"


cator-() {
	[ -f "$1" ] && cat "$1"	|| echo ' -'
}


bests() {
	cat $RESULTS/$user/*/best 2>/dev/null
}


problems-tried() {
	bests | wc -l
}


problems-solved() {
	bests | bc | grep "^1$" | wc -l
}


problems-scored() {
	bests | grep -v "^0/" | wc -l
}


rank() {
	[ -f $results/rank ] &&
		cat $results/rank ||
		echo '?'
}


overall-stats() {
	echo "`problems-solved` problems solved"
	echo "`problems-scored` problems scored"
	echo "`problems-tried` problems tried"
	echo "position `rank` on the rank"
	echo "score: `$score $user` (`$score`)"
}


problem-stats() {
	for problem in `ls-problems`
	do
		score=`cator- "$results/$problem/best"`
		tries=`find $results/$problem -mindepth 1 -maxdepth 1 -type d 2>/dev/null | wc -l`
		printf "%s %s %s\n" "$problem" "$score" "$tries"
	done | column -t -R 2
}


all-stats() {
	overall-stats
	problem-stats
}


short-stats() {
	s="`$score $user`" || errxit "problem evaluating scores for $user using '$score $user'"
	echo "`$score $user` $user"
}


case "$action" in
	overall) overall-stats ;;
	problem) problem-stats ;;
	short)   short-stats ;;
	all|"")  all-stats ;;
	*)       errxit "Unknown stat type" ;;
esac
