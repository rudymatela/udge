#!/bin/bash
#
# udge-sandbox: runs a program in a sandbox
#
# Usage: udge-sandbox <program> <arguments>
#
#
# Copyright (C) 2020-2023  Rudy Matela
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Set the CHROOT variable to run this program under a different root.
#
# CHROOT=.
prefix="$(dirname "$(dirname "$0")")"
. "$prefix/lib/udge/core"

[ -n "$MAX_PROCESSES" ] || MAX_PROCESSES=512 # processes

# Hack for Erlang:
[ -n "$MAX_FILE_SIZE" ] || MAX_FILE_SIZE=1024 # K, 1M

# Erlang HACK:
# on Ubuntu 20.04 with Erlang/OTP 22 [erts-10.6.4],
# HOME must be set to use escript, see:
#
#     $ udge-sandbox /usr/bin/escript hello-world.erl
#     erlexec: HOME must be set
#
# escript works fine on Arch Linux (2021-12)
# with Erlang/OTP 24 [erts-12.1.5].
#
# The following hack makes it so that the program is run
# even on Ubuntu when the first argument is "escript"
ENV=
echo "$@" | grep -qE "(^| )escript " && ENV=HOME=/dev/null

# NOTE: ulimit's manpage states that "-f" is in 512B blocks
#       however "ulimit --help" states it is in 1024B / 1K
#       We assume the "--help" option to be true below.

# NOTE: If you get "timer_create: Resource temporarily unavailable"
#       when running Udge (dev) tests in parallel, try increasing
#       "-i" to 4096 or 8192 signals.

ulimit -c 0 # K, disables core dumps
ulimit -d 1048576 # K, 1024M, 1G
ulimit -f $MAX_FILE_SIZE # Hack for Erlang
ulimit -i 1024 # signals
ulimit -l 32 # K
ulimit -m 2097152 # K, 2048M, 2G
ulimit -n 256 # files
ulimit -q 1024 # queues
ulimit -s 8192 # K, 8M
ulimit -u $MAX_PROCESSES # processes
ulimit -v 4194304 # K, 4096M, 2G
ulimit -x 1024 # file locks
# use `ulimit -a` for a list
# use `ulimit -h` for a complete list

# for `-f`, `ulimit -a` lists the unit as blocks but it seems to be KiBs
# cf.: examples/sandbox.txt, *-1m.c and *-1m1b.c files

chroot=
[ -n "$CHROOT" ] && chroot="fakechroot chroot $CHROOT"
exec unshare -Urn -impuf --kill-child env -i $chroot $ENV "$@"

# In a fresh user, only 5 processes are needed, they are:
#
# 1. udge-build-and-run
# 2. timeout
# 3. udge-sandbox
# 4. unshare
# 5. exe
#
# The exe may be "more" processes depending on the language being used
# (e.g.: Java).
