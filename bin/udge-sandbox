#!/bin/bash
#
# udge-sandbox: runs a program in a sandbox
#
# Usage: udge-sandbox <program> <arguments>
#
#
# Copyright (C) 2020  Rudy Matela
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Set the CHROOT variable to run this program under a different root.
#
# CHROOT=. 

[ -n "$MAX_PROCESSES" ] || MAX_PROCESSES=2048 # just for now...

ulimit -c 262144 # blocks, 128M
ulimit -d 524288 # K, 512M
ulimit -f 262144 # blocks, 128M
ulimit -i 1024 # signals
ulimit -l 16 # K
ulimit -m 1048576 # K, 1024M, 1G
ulimit -n 32 # files
ulimit -q 1024 # queues
ulimit -s 8192 # K, 8M
ulimit -u $MAX_PROCESSES # processes
ulimit -v 2097152 # K, 2G
ulimit -x 1024 # file locks
# use `ulimit -a` for a list
# use `ulimit -h` for a complete list

chroot=
[ -n "$CHROOT" ] && chroot="fakechroot chroot $CHROOT"
exec unshare -Urn -impuf --kill-child env -i $chroot "$@"

# In a fresh user, only 5 processes are needed, they are:
#
# 1. udge-build-and-run
# 2. timeout
# 3. udge-sandbox
# 4. unshare
# 5. exe
#
# TODO: eventually test to decide a better MAX_PROCESSES default
