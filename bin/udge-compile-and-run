#!/bin/bash
#
# udge-compile-and-run: runs a submission in a slot
#
# Usage: udge-compile-and-run <slot>
#
# where <slot> is by default either 1, 2, 3, 4, 5 or 6
#
#
# Copyright (C) 2020  Rudy Matela
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# You should run this in a user that only has write permission to
# /run/udge/<slot> to prevent tampering with the system and other submissions.

prefix="$(dirname "$(dirname "$0")")"
. "$prefix/lib/udge/core"

set -e

slot="$1"
verbose="$2"
[ -n "$slot" ] || errxit "you must provide a slot"
[ -d "$SLOTS/$slot" ] || errxit "slot not found (src): $slot"
[ -d "$RUN/$slot" ] || errxit "slot not found (run): $slot"

rm -rf $RUN/$slot/junk # cleanup any junk left from the previous submission

submission="`find $SLOTS/$slot -type f`"
[ -n "$submission" ] || finish "nothing to do on slot $slot"
lock=$RUN/$slot/lock
mkdir "$lock" || finish "Failed to lock $lock.  Already running or run?"

unlock-and-finish() {
	rm -r $lock
	finish "$@" "(unlocking $lock)"
}

unlock-and-errxit() {
	rm -r $lock
	errxit "$@" "(unlocking $lock)"
}

echo Compiling then running $submission.

[ -f "$submission" ] || unlock-and-errxit "failed sanity check"  # TODO: create a dummy "run" and purge the submission

user="`     echo $submission | sed -e 's,.*/\(.*\)/\(.*\)/\(.*\)\.\(.*\),\1,'`"
timestamp="`echo $submission | sed -e 's,.*/\(.*\)/\(.*\)/\(.*\)\.\(.*\),\2,'`"
problem="`  echo $submission | sed -e 's,.*/\(.*\)/\(.*\)/\(.*\)\.\(.*\),\3,'`"
language="` echo $submission | sed -e 's,.*/\(.*\)/\(.*\)/\(.*\)\.\(.*\),\4,'`"

[ -n "$user" ]      || unlock-and-errxit "could not parse user"  # TODO: create a dummy "run" and purge the submission
[ -n "$timestamp" ] || unlock-and-errxit "could not parse timestamp"
[ -n "$problem" ]   || unlock-and-errxit "could not parse problem"
[ -n "$language" ]  || unlock-and-errxit "could not parse language"

compileandrun="`realpath "$lib/compile-and-run"`"
cd $lock
$compileandrun $PROBLEMS/$problem $submission $lock/run- $verbose
cd - >/dev/null
mv $lock/run- $lock/run
echo Created $lock/run
